// COMS20001 - Cellular Automaton Farm - Initial Code Skeleton
// (using the XMOS i2c accelerometer demo code)

#include <platform.h>
#include <xs1.h>
#include <stdio.h>
#include "pgmIO.h"
#include "i2c.h"

#define  IMHT 128                  //image height
#define  IMWD 128                  //image width
#define WKNB 8                    //number of workers

#define FILEINNAME ("64x64.pgm")
#define FILEOUTNAME ("testout.pgm")

typedef unsigned char uchar;      //using uchar as shorthand

on tile[0]: port p_scl = XS1_PORT_1E;         //interface ports to orientation
on tile[0]: port p_sda = XS1_PORT_1F;

#define FXOS8700EQ_I2C_ADDR 0x1E  //register addresses for orientation
#define FXOS8700EQ_XYZ_DATA_CFG_REG 0x0E
#define FXOS8700EQ_CTRL_REG_1 0x2A
#define FXOS8700EQ_DR_STATUS 0x0
#define FXOS8700EQ_OUT_X_MSB 0x1
#define FXOS8700EQ_OUT_X_LSB 0x2
#define FXOS8700EQ_OUT_Y_MSB 0x3
#define FXOS8700EQ_OUT_Y_LSB 0x4
#define FXOS8700EQ_OUT_Z_MSB 0x5
#define FXOS8700EQ_OUT_Z_LSB 0x6

on tile[0] : in port buttons = XS1_PORT_4E; //port to access xCore-200 buttons
on tile[0] : out port leds = XS1_PORT_4F;   //port to access xCore-200 LEDs

//DISPLAYS an LED pattern
void showLEDs(out port p, chanend fromDistributor) {
  int pattern = 0; //1st bit...separate green LED
                      //2nd bit...blue LED
                      //3rd bit...green LED
                      //4th bit...red LED
  int patternChange;

  while (1) {
    fromDistributor :> patternChange;   //receive new pattern from visualiser
    pattern = pattern ^ patternChange;
    p <: pattern;                //send pattern to LED port
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Read Image from PGM file from path infname[] to channel c_out
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataInStream(char infname[], chanend c_out)
{
  int res;
  uchar line[ IMWD ], packedByte;
  printf( "DataInStream: Start...\n" );

  //Open PGM file
  res = _openinpgm( infname, IMWD, IMHT );
  if( res ) {
    printf( "DataInStream: Error openening %s\n.", infname );
    return;
  }

  //Read image line-by-line and send byte by byte to channel c_out
  for( int y = 0; y < IMHT; y++ ) {
    _readinline( line, IMWD );
    int counter = 0, shifter = 7;
    packedByte = 0;
    for( int x = 0; x < IMWD; x++ ) {
      // packing

    if (counter < 8) {
          packedByte = packedByte | (( line[ x ] & 0x01 ) << shifter);
          shifter--;
          counter++;
      }
      if (counter == 8){
          c_out <: packedByte;
          printf( "-%4.1X ", packedByte ); //show image values
          counter = 0;
          shifter = 7;
          packedByte = 0;
      }

    }
    printf( "\n" );
  }

  //Close PGM image file
  _closeinpgm();
  printf( "DataInStream: Done...\n" );
  return;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Start your implementation by changing this function to implement the game of life
// by farming out parts of the image to worker threads who implement it...
// Currently the function just inverts the image
//
/////////////////////////////////////////////////////////////////////////////////////////
void distributor(in port p_button, chanend c_in, chanend c_out, chanend fromAcc, chanend toOut, chanend toWorker[WKNB], chanend toLEDs){
  uchar val;
  int r = 0, round = 0, liveCount = 0, workerLiveCount, tilted = 2, notPrinted = 1;
  uchar originalWorld[ IMHT ][ IMWD / 8 ];

  //Starting up and wait for tilting of the xCore-200 Explorer
  printf( "ProcessImage: Start, size = %dx%d\n", IMHT, IMWD );
  printf( "Waiting for SW1 button (left) to be pressed...\n" );
//  fromAcc :> int value;

   while (r != 14) {
       p_button when pinsneq(15) :> r;    // check if some buttons are pressed
       if (r==14) {     // if either button is pressed
           //Game logic begins

           //Read in
           printf( "Processing...\n" );

           //Indicate Green LED for reading
           toLEDs <: 4;

               for( int y = 0; y < IMHT; y++ ) {   //go through all lines
                 for( int x = 0; x < IMWD / 8; x++ ) { //go through each pixel per line
                   c_in :> val;                    //read the pixel value
                   originalWorld[y][x] = val;
                   // Update liveCount
                   int i = 0;
                   while (i < 8) {
                       uchar bit = ( val >> i ) & 0x01;
                       if (bit == 1) liveCount++;
                       i++;
                   }
                 }
            }

               printf("\nThe live count is: %d\n", liveCount);
       }
   }

   //Indicate Green LED for reading done
   toLEDs <: 4;

           while (1){
               fromAcc :> tilted;

               if (!tilted) {
                   if (!notPrinted) {
                       toLEDs <: 8;
                   }
                   round++;
                   notPrinted = 1;
               //Indicate LEDs that process has started(turn Green LED on only
               //on odd rounds
               toLEDs <: 1;

               liveCount = 0;

               //Send map to worker threads
               for (int n = 0 ; n < WKNB ; n++) {
                   int start = ((n * IMHT) / WKNB) - 1;
                   int finish = ((n + 1) * IMHT) / WKNB;
                   for (int y = start ; y <= finish ; y++) {
                       int mappedY = y;
                       for (int x = 0 ; x < IMWD / 8 ; x++) {
                           if (y == -1) mappedY = IMHT - 1;
                           else if (y == IMHT) mappedY = 0;
                           toWorker[n] <: originalWorld[mappedY][x];
                       }
                   }
               }

               int workerLiveCount;
               uchar stripValue;

               //Receive map from worker threads
               for (int n = 0 ; n < WKNB ; n++) {
                   int start = n * IMHT / WKNB;
                   int finish = (n + 1) * IMHT / WKNB - 1;
                   for (int y = start ; y <= finish ; y++) {
                       for (int x = 0 ; x < IMWD / 8 ; x++) {
                           toWorker[n] :> stripValue;
                           originalWorld[y][x] = stripValue;
                       }
                   }
                   toWorker[n] :> workerLiveCount;
                   liveCount += workerLiveCount;
               }

                 //Check for SW2 button being pressed
                 // Idea got from XMOS docs
                 int current_val = 14;

                 int current_acc = 5;

                     select{
                         // event when the button changes value
                         case p_button when pinsneq(current_val) :> int new_val:
                             if (new_val == 13) {
                                 //Indicate LEDs that the wirting process has started
                                 toLEDs <: 2;
                                 toOut <: 1;
                                 for( int y = 0; y < IMHT; y++ ) {   //go through all lines
                                                        for( int x = 0; x < IMWD / 8; x++ ) { //go through each pixel per line
                                                            c_out <: originalWorld[y][x];
                                                        }
                                                  }
                                 //Indicate LEDs that the wirting process has ended
                                 toLEDs <: 2;
                             } else {
                                 break;
                             }
                             break;
                     }


                 printf( "\nRound no. %d completed...\n", round );
               } else {
                   if (notPrinted) {
                       toLEDs <: 8;
                       printf("\n\n=====================================\n PRINTING PAUSE REPORT \n====================================\n");
                       printf("Current round: %d\n", round);
                       printf("Current number of live cells: %d\n\n", liveCount);
                       notPrinted = 0;
                   }
               }

           }
}

void worker(chanend fromDistributor) {
    uchar originalWorld[ IMHT + 3 ][ IMWD / 8 ], copyWorld[ IMHT + 3 ][ IMWD / 8 ];
    uchar val;

    while(1) {
        int liveCount = 0;

        //Receive strip from distributor
        for (int y = 0 ; y < (IMHT / WKNB) + 2 ; y++) {
            for (int x = 0 ; x < IMWD / 8 ; x++) {
                fromDistributor :> val;
                originalWorld[y][x] = val;
                copyWorld[y][x] = val;
                int i = 0;
                if (y != 0 && y != (IMHT / WKNB) + 1) {
                    while (i < 8) {
                        uchar bit = ( val >> i ) & 0x01;
                        if (bit == 1) liveCount++;
                        i++;
                        }
                }

            }
        }

        int endOfStrip = (IMHT / WKNB) + 1;
        //Process the strip
        for (int y = 1 ; y < endOfStrip ; y++) {
            for (int x = 0 ; x < IMWD / 8 ; x++) {
                //Incorporate logic for neighbour checking here
                int shift = 7, leftShift, rightShift, leftX, rightX, upY, downY;
                while (shift >= 0) {
                    int aliveNeighbours = 0;
                    leftShift = shift + 1;
                    rightShift = shift - 1;
                    leftX = x;
                    rightX = x;
                    upY = y - 1;
                    downY = y + 1;
                    if (shift == 7) {
                        leftShift = 0;
                        if (x == 0) {
                            leftX = IMWD / 8 - 1;
                        } else {
                            leftX = x - 1;
                        }
                    } else if (shift == 0) {
                        rightShift = 7;
                        if (x == IMWD / 8 - 1) {
                            rightX = 0;
                        } else {
                            rightX = x + 1;
                        }
                    }
                    //Left
                    if (((copyWorld[y][leftX] >> leftShift) & 0x01) == 1) aliveNeighbours++;
                    //Left-Up
                    if (((copyWorld[upY][leftX] >> leftShift) & 0x01) == 1) aliveNeighbours++;
                    //Up
                    if (((copyWorld[upY][x] >> shift) & 0x01) == 1) aliveNeighbours++;
                    //Right-Up
                    if (((copyWorld[upY][rightX] >> rightShift) & 0x01) == 1) aliveNeighbours++;
                    //Right
                    if (((copyWorld[y][rightX] >> rightShift) & 0x01) == 1) aliveNeighbours++;
                    //Right-Down
                    if (((copyWorld[downY][rightX] >> rightShift) & 0x01) == 1) aliveNeighbours++;
                    //Down
                    if (((copyWorld[downY][x] >> shift) & 0x01) == 1) aliveNeighbours++;
                    //Left-Down
                    if (((copyWorld[downY][leftX] >> leftShift) & 0x01) == 1) aliveNeighbours++;

                    //Game logic
                    if (aliveNeighbours < 2 || aliveNeighbours > 3) {
                        if (((originalWorld[y][x] >> shift) & 0x01) == 1) liveCount--;
                        originalWorld[y][x] = originalWorld[y][x] & ((0xFF << (shift + 1)) | (0xFF >> (8 - shift)));
                    } else if (((originalWorld[y][x] >> shift) & 0x01) == 0 && aliveNeighbours == 3) {
                        originalWorld[y][x] = originalWorld[y][x] | (0x01 << shift);
                        liveCount++;
                    }

                    shift--;
                }
            }
        }

        //Send back the strip to the distributor
        for (int y = 1 ; y < endOfStrip ; y++) {
            for (int x = 0 ; x < IMWD / 8 ; x++) {
                fromDistributor <: originalWorld[y][x];
            }
        }

        fromDistributor <: liveCount;

    }
}


/////////////////////////////////////////////////////////////////////////////////////////
//
// Write pixel stream from channel c_in to PGM image file
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataOutStream(char outfname[], chanend c_in, chanend fromD)
{
  int res, printCommand;
  uchar line[ IMWD ];

  while(1) {
       fromD :> printCommand;
       //Open PGM file
       printf( "DataOutStream: Start...\n" );
       res = _openoutpgm( outfname, IMWD, IMHT );

       if( res ) {
           printf( "DataOutStream: Error opening %s\n.", outfname );
           return;
         }

       uchar packedByte;
         //Compile each line of the image and write the image line-by-line
       for( int y = 0; y < IMHT; y++ ) {
           int shifter = 7, counter = 0;
          for( int x = 0; x < IMWD / 8; x++ ) {
             c_in :> packedByte;
             while (counter < 8) {
                 if (((packedByte >> shifter) & 0x01) == 1) {
                     line[ x * 8 + 7 - shifter ]  = 255;
                 } else {
                     line[ x * 8 + 7 - shifter ]  = 0;
                 }
                 shifter--;
                 counter++;
             }
             if (counter == 8) {
                 shifter = 7;
                 counter = 0;
             }
           }
           _writeoutline( line, IMWD );
           printf( "DataOutStream: Line written...\n" );
         }
        //Close the PGM image
        _closeoutpgm();
        printf( "DataOutStream: Done...\n" );
    }

  return;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Initialise and  read orientation, send first tilt event to channel
//
/////////////////////////////////////////////////////////////////////////////////////////
void orientation( client interface i2c_master_if i2c, chanend toDist) {
  i2c_regop_res_t result;
  char status_data = 0;
  int tilted = 0;

  // Configure FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_XYZ_DATA_CFG_REG, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }
  
  // Enable FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_CTRL_REG_1, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }

  //Probe the orientation x-axis forever
  while (1) {

    //check until new orientation data is available
    do {
      status_data = i2c.read_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_DR_STATUS, result);
    } while (!status_data & 0x08);

    //get new x-axis tilt value
    int x = read_acceleration(i2c, FXOS8700EQ_OUT_X_MSB);

    //send signal to distributor after first tilt
    if(x <= 30) toDist <: 0; //SEND 0 FOR NOT TILT
    else toDist <: 1; //SEND 1 WHEN TILT
  }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Orchestrate concurrent system and start up all threads
//
/////////////////////////////////////////////////////////////////////////////////////////
int main(void) {

i2c_master_if i2c[1];               //interface to orientation

chan c_inIO, c_outIO, c_control, c_outC, c_toWorker[WKNB], c_distributorToLEDs;    //extend your channel definitions here

par {
    on tile[0]: i2c_master(i2c, 1, p_scl, p_sda, 10);   //server thread providing orientation data
    on tile[0]: orientation(i2c[0],c_control);        //client thread reading orientation data
    on tile[0]: DataInStream(FILEINNAME, c_inIO);          //thread to read in a PGM image
    on tile[0]: DataOutStream(FILEOUTNAME, c_outIO, c_outC);       //thread to write out a PGM image
    on tile[0]: showLEDs(leds, c_distributorToLEDs);
    on tile[0]: distributor(buttons, c_inIO, c_outIO, c_control, c_outC, c_toWorker, c_distributorToLEDs);//thread to coordinate work on image
    par (int i = 0 ; i < 8 ; i++) {
        on tile[1]: worker(c_toWorker[i]);
    }
  }

  return 0;
}
